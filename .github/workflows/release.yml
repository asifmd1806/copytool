name: Release

on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tree
          npm install
          npm install -g @vscode/vsce
          
      - name: Verify dependencies
        run: |
          echo "Checking webpack installation:"
          npm ls webpack webpack-cli ts-loader
          echo "Checking node_modules:"
          ls -la node_modules/minimatch
          echo "Package contents:"
          npm ls minimatch
          
      - name: List directory structure
        run: |
          echo "TypeScript files and services:"
          tree src -P "*.ts" --prune
          echo "Core services directory:"
          tree src/core/services -P "*.ts" --prune
          
      - name: Determine version bump
        id: bump
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]] || [[ $COMMIT_MSG == *"!:"* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MSG == *"feat:"* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi
          
      - name: Get current version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.version.outputs.current }}
          BUMP_TYPE=${{ steps.bump.outputs.type }}
          
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          case $BUMP_TYPE in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Update version in package.json
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.version }}
          npm version $NEW_VERSION --no-git-tag-version
          
      - name: Build extension
        run: |
          npm run build
          echo "Build output:"
          ls -la out/
          echo "VSIX contents:"
          unzip -l *.vsix
          
      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-copytool
          path: "*.vsix"
          if-no-files-found: error

      - name: Create and push tag
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.version }}
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json package-lock.json webpack.config.js
          git commit -m "chore: bump version to ${NEW_VERSION} [skip ci]"
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"
          git push
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: "*.vsix"
          draft: false
          prerelease: false
          name: Release v${{ steps.new_version.outputs.version }}
          tag_name: v${{ steps.new_version.outputs.version }}
          generate_release_notes: true 